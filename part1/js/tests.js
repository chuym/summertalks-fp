var assert = require("assert"),
    next = require("./ex1"),
    collatz = require("./ex2"),
    searchA = require("./ex3a"),
    searchB = require("./ex3b"),
    largestSubmatrix = require("./ex4");

describe("Exercise #1 - Next in List", function () {

    it("Should find the correct result for a simple case", function () {
        var testcase = [5,4,1],
            result = next(testcase, 4);

        assert.equal(result, 1);
    });

    it("Should handle an array object properly", function () {
        var testcase = new Array(5,4,1),
            result = next(testcase, 4);

        assert.equal(result, 1);
    });

    it("Should return undefined if index is not found", function () {
        var testcase = [5,4,1],
            result = next(testcase, 7);

        assert.equal(result, undefined);
    });

    it("Should return undefined if index is the last one", function () {
        var testcase = [5,4,1],
            result = next(testcase, 1);

        assert.equal(result, undefined);
    });

    it("If there are multiple occurences, use the last one.", function () {
        var testcase = [5,4,1,4,5],
            result = next(testcase, 4);

        assert.equal(result, 5);
    });

    it("If there are multiple occurences, use the last one even if it's the last one on the list.", function () {
        var testcase = [5,4,1,4,5],
            result = next(testcase, 5);

        assert.equal(result, undefined);
    });

    it("Should work for strings as well", function () {
        var testcase = ["apple", "orange", "banana"]
            result = next(testcase, "orange");

        assert.equal(result, "banana");
    });
});

describe("Exercise #2 - Collatz Sequence", function () {
    it("Should return the correct sequence for a small number", function () {
        var sequence = collatz(15);
        assert.deepEqual(sequence, [15,46,23,70,35,106,53,160,80,40,20,10,5,16,8,4,2,1]);
    });

    it("Should return the correct sequence for a medium number", function () {
        var sequence = collatz(25492);
        assert.deepEqual(sequence, [25492,12746,6373,19120,9560,4780,2390,1195,3586,1793,5380,2690,1345,4036,2018,1009,3028,1514,757,2272,1136,568,284,142,71,214,107,322,161,484,242,121,364,182,91,274,137,412,206,103,310,155,466,233,700,350,175,526,263,790,395,1186,593,1780,890,445,1336,668,334,167,502,251,754,377,1132,566,283,850,425,1276,638,319,958,479,1438,719,2158,1079,3238,1619,4858,2429,7288,3644,1822,911,2734,1367,4102,2051,6154,3077,9232,4616,2308,1154,577,1732,866,433,1300,650,325,976,488,244,122,61,184,92,46,23,70,35,106,53,160,80,40,20,10,5,16,8,4,2,1]);
    });

    it("Should return the correct sequence for a very large number", function () {
        var sequence = collatz(73758382992);
        assert.deepEqual(sequence, [73758382992,36879191496,18439595748,9219797874,4609898937,13829696812,6914848406,3457424203,10372272610,5186136305,15558408916,7779204458,3889602229,11668806688,5834403344,2917201672,1458600836,729300418,364650209,1093950628,546975314,273487657,820462972,410231486,205115743,615347230,307673615,923020846,461510423,1384531270,692265635,2076796906,1038398453,3115195360,1557597680,778798840,389399420,194699710,97349855,292049566,146024783,438074350,219037175,657111526,328555763,985667290,492833645,1478500936,739250468,369625234,184812617,554437852,277218926,138609463,415828390,207914195,623742586,311871293,935613880,467806940,233903470,116951735,350855206,175427603,526282810,263141405,789424216,394712108,197356054,98678027,296034082,148017041,444051124,222025562,111012781,333038344,166519172,83259586,41629793,124889380,62444690,31222345,93667036,46833518,23416759,70250278,35125139,105375418,52687709,158063128,79031564,39515782,19757891,59273674,29636837,88910512,44455256,22227628,11113814,5556907,16670722,8335361,25006084,12503042,6251521,18754564,9377282,4688641,14065924,7032962,3516481,10549444,5274722,2637361,7912084,3956042,1978021,5934064,2967032,1483516,741758,370879,1112638,556319,1668958,834479,2503438,1251719,3755158,1877579,5632738,2816369,8449108,4224554,2112277,6336832,3168416,1584208,792104,396052,198026,99013,297040,148520,74260,37130,18565,55696,27848,13924,6962,3481,10444,5222,2611,7834,3917,11752,5876,2938,1469,4408,2204,1102,551,1654,827,2482,1241,3724,1862,931,2794,1397,4192,2096,1048,524,262,131,394,197,592,296,148,74,37,112,56,28,14,7,22,11,34,17,52,26,13,40,20,10,5,16,8,4,2,1]);
    });

});

describe("Exercise #3a", function () {
    it("Should find a value in a simple list", function () {
        var found = searchA([1,2,3,4], 3);
        assert.ok(found);
    });

    it("Should find a value in a string list", function () {
        var found = searchA(["apple", "orange", "banana"], "orange");
        assert.ok(found, true);
    });

    it("Should return null if element not in list", function () {
        var found = searchA(["apple", "orange", "banana"], "pear");
        assert.equal(found, null);
    });

    it("Should find a number in a big list", function () {
        var list = [73758382992,36879191496,18439595748,9219797874,4609898937,13829696812,6914848406,3457424203,10372272610,5186136305,15558408916,7779204458,3889602229,11668806688,5834403344,2917201672,1458600836,729300418,364650209,1093950628,546975314,273487657,820462972,410231486,205115743,615347230,307673615,923020846,461510423,1384531270,692265635,2076796906,1038398453,3115195360,1557597680,778798840,389399420,194699710,97349855,292049566,146024783,438074350,219037175,657111526,328555763,985667290,492833645,1478500936,739250468,369625234,184812617,554437852,277218926,138609463,415828390,207914195,623742586,311871293,935613880,467806940,233903470,116951735,350855206,175427603,526282810,263141405,789424216,394712108,197356054,98678027,296034082,148017041,444051124,222025562,111012781,333038344,166519172,83259586,41629793,124889380,62444690,31222345,93667036,46833518,23416759,70250278,35125139,105375418,52687709,158063128,79031564,39515782,19757891,59273674,29636837,88910512,44455256,22227628,11113814,5556907,16670722,8335361,25006084,12503042,6251521,18754564,9377282,4688641,14065924,7032962,3516481,10549444,5274722,2637361,7912084,3956042,1978021,5934064,2967032,1483516,741758,370879,1112638,556319,1668958,834479,2503438,1251719,3755158,1877579,5632738,2816369,8449108,4224554,2112277,6336832,3168416,1584208,792104,396052,198026,99013,297040,148520,74260,37130,18565,55696,27848,13924,6962,3481,10444,5222,2611,7834,3917,11752,5876,2938,1469,4408,2204,1102,551,1654,827,2482,1241,3724,1862,931,2794,1397,4192,2096,1048,524,262,131,394,197,592,296,148,74,37,112,56,28,14,7,22,11,34,17,52,26,13,40,20,10,5,16,8,4,2,1];
        var found = searchA(list, 10372272610);
        assert.ok(found);
    });

    it("Should fail to find a number not in a big list", function () {
        var list = [73758382992,36879191496,18439595748,9219797874,4609898937,13829696812,6914848406,3457424203,10372272610,5186136305,15558408916,7779204458,3889602229,11668806688,5834403344,2917201672,1458600836,729300418,364650209,1093950628,546975314,273487657,820462972,410231486,205115743,615347230,307673615,923020846,461510423,1384531270,692265635,2076796906,1038398453,3115195360,1557597680,778798840,389399420,194699710,97349855,292049566,146024783,438074350,219037175,657111526,328555763,985667290,492833645,1478500936,739250468,369625234,184812617,554437852,277218926,138609463,415828390,207914195,623742586,311871293,935613880,467806940,233903470,116951735,350855206,175427603,526282810,263141405,789424216,394712108,197356054,98678027,296034082,148017041,444051124,222025562,111012781,333038344,166519172,83259586,41629793,124889380,62444690,31222345,93667036,46833518,23416759,70250278,35125139,105375418,52687709,158063128,79031564,39515782,19757891,59273674,29636837,88910512,44455256,22227628,11113814,5556907,16670722,8335361,25006084,12503042,6251521,18754564,9377282,4688641,14065924,7032962,3516481,10549444,5274722,2637361,7912084,3956042,1978021,5934064,2967032,1483516,741758,370879,1112638,556319,1668958,834479,2503438,1251719,3755158,1877579,5632738,2816369,8449108,4224554,2112277,6336832,3168416,1584208,792104,396052,198026,99013,297040,148520,74260,37130,18565,55696,27848,13924,6962,3481,10444,5222,2611,7834,3917,11752,5876,2938,1469,4408,2204,1102,551,1654,827,2482,1241,3724,1862,931,2794,1397,4192,2096,1048,524,262,131,394,197,592,296,148,74,37,112,56,28,14,7,22,11,34,17,52,26,13,40,20,10,5,16,8,4,2,1];
        var found = searchA(list, 10372272610);
        assert.ok(46182944839);
    });
});

describe("Exercise #3b", function () {
    it("Should find a value in a simple list", function () {
        var found = searchB([1,2,3,4], 3);
        assert.ok(found);
    });

    it("Should find a value in a string list", function () {
        var found = searchB(["apple", "orange", "banana"], "orange");
        assert.ok(found, true);
    });

    it("Should return null if element not in list", function () {
        var found = searchB(["apple", "orange", "banana"], "pear");
        assert.equal(found, null);
    });

    it("Should find a number in a big list", function () {
        var list = [73758382992,36879191496,18439595748,9219797874,4609898937,13829696812,6914848406,3457424203,10372272610,5186136305,15558408916,7779204458,3889602229,11668806688,5834403344,2917201672,1458600836,729300418,364650209,1093950628,546975314,273487657,820462972,410231486,205115743,615347230,307673615,923020846,461510423,1384531270,692265635,2076796906,1038398453,3115195360,1557597680,778798840,389399420,194699710,97349855,292049566,146024783,438074350,219037175,657111526,328555763,985667290,492833645,1478500936,739250468,369625234,184812617,554437852,277218926,138609463,415828390,207914195,623742586,311871293,935613880,467806940,233903470,116951735,350855206,175427603,526282810,263141405,789424216,394712108,197356054,98678027,296034082,148017041,444051124,222025562,111012781,333038344,166519172,83259586,41629793,124889380,62444690,31222345,93667036,46833518,23416759,70250278,35125139,105375418,52687709,158063128,79031564,39515782,19757891,59273674,29636837,88910512,44455256,22227628,11113814,5556907,16670722,8335361,25006084,12503042,6251521,18754564,9377282,4688641,14065924,7032962,3516481,10549444,5274722,2637361,7912084,3956042,1978021,5934064,2967032,1483516,741758,370879,1112638,556319,1668958,834479,2503438,1251719,3755158,1877579,5632738,2816369,8449108,4224554,2112277,6336832,3168416,1584208,792104,396052,198026,99013,297040,148520,74260,37130,18565,55696,27848,13924,6962,3481,10444,5222,2611,7834,3917,11752,5876,2938,1469,4408,2204,1102,551,1654,827,2482,1241,3724,1862,931,2794,1397,4192,2096,1048,524,262,131,394,197,592,296,148,74,37,112,56,28,14,7,22,11,34,17,52,26,13,40,20,10,5,16,8,4,2,1];
        var found = searchB(list, 10372272610);
        assert.ok(found);
    });

    it("Should fail to find a number not in a big list", function () {
        var list = [73758382992,36879191496,18439595748,9219797874,4609898937,13829696812,6914848406,3457424203,10372272610,5186136305,15558408916,7779204458,3889602229,11668806688,5834403344,2917201672,1458600836,729300418,364650209,1093950628,546975314,273487657,820462972,410231486,205115743,615347230,307673615,923020846,461510423,1384531270,692265635,2076796906,1038398453,3115195360,1557597680,778798840,389399420,194699710,97349855,292049566,146024783,438074350,219037175,657111526,328555763,985667290,492833645,1478500936,739250468,369625234,184812617,554437852,277218926,138609463,415828390,207914195,623742586,311871293,935613880,467806940,233903470,116951735,350855206,175427603,526282810,263141405,789424216,394712108,197356054,98678027,296034082,148017041,444051124,222025562,111012781,333038344,166519172,83259586,41629793,124889380,62444690,31222345,93667036,46833518,23416759,70250278,35125139,105375418,52687709,158063128,79031564,39515782,19757891,59273674,29636837,88910512,44455256,22227628,11113814,5556907,16670722,8335361,25006084,12503042,6251521,18754564,9377282,4688641,14065924,7032962,3516481,10549444,5274722,2637361,7912084,3956042,1978021,5934064,2967032,1483516,741758,370879,1112638,556319,1668958,834479,2503438,1251719,3755158,1877579,5632738,2816369,8449108,4224554,2112277,6336832,3168416,1584208,792104,396052,198026,99013,297040,148520,74260,37130,18565,55696,27848,13924,6962,3481,10444,5222,2611,7834,3917,11752,5876,2938,1469,4408,2204,1102,551,1654,827,2482,1241,3724,1862,931,2794,1397,4192,2096,1048,524,262,131,394,197,592,296,148,74,37,112,56,28,14,7,22,11,34,17,52,26,13,40,20,10,5,16,8,4,2,1];
        var found = searchB(list, 10372272610);
        assert.ok(46182944839);
    });
});

describe("Exercise #4", function () {
    it("Should return the correct result for a simple matrix", function () {
        var testcase = [ [1,2,3], [4,5,6], [7,8,9] ];
        assert.deepEqual(largestSubmatrix(testcase), testcase);
    });

    it("Should return the correct result for a recatngular matrix", function () {
        var testcase = [ [1,-5,3], [4,5,6] ];
        assert.deepEqual(largestSubmatrix(testcase), [ [4,5,6] ]);
    });

    it("Should return a vertical matrix as a correct result", function () {
        var testcase = [ [-6, 15, 2], [-4,5,-9], [1, 19, -13] ];
        assert.deepEqual(largestSubmatrix(testcase), [ [15],[5],[19] ]);
    });

    it("Should return a partial vertical matrix as a correct result", function () {
        var testcase = [ [-6, -15, 2], [-4,5,-9], [1, 19, -13] ];
        assert.deepEqual(largestSubmatrix(testcase), [ [5],[19] ]);
    });

    it("Should return a sub matrix around the center", function () {
        var testcase = [ [-6, -15, 2, -17], [-4,5,19, -39], [1, 19, 33, -25], [1, 4, -5, 2] ];
        assert.deepEqual(largestSubmatrix(testcase), [ [5, 19], [19, 33] ]);
    });
});
